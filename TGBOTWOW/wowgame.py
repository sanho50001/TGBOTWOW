import random
import time
import datetime
from game.armor import Armor
from game.weapon import Weapon
from game.settings.settings_game import settings
from game.battle import Battle
from game.loot import Loot
from game.movement import Movement
from game.potion import Potion
from game.tavern import Tavern
from game.tranquility import Tranquility
from game.db_commands import database, settings_on_db
from game.hero import Hero
from game.user import user
from game.character_stats import Stats
from game.npc import npc
from game.zone import zone
import game.creatinghero as creathero
# from main import bot
from dotenv import load_dotenv
import os
from telebot import types
import telebot

load_dotenv()
bot = telebot.TeleBot(os.getenv('telebot_token'))


class Heroes:
    def __init__(self):
        self.hero = Hero()
        self.stats = Stats()
        self.health = self.stats.hp

        if self.health or self.hero.health_procent <= 0:
            self.hero.health_status = 'Dead'

        if self.stats.xp >= self.stats.lvl * 200:
            self.stats.xp -= self.stats.lvl * 200
            self.lvl_up()

    def lvl_up(self):
        if self.hero.get_classes_hero() == 'Warrior' or 'Paladin' or 'Death Knight':
            self.stats.main_stats = self.stats.str

        elif self.hero.get_classes_hero() == 'Hunter' or 'Rogue' or 'Druid':
            self.stats.main_stats = self.stats.agi

        elif self.hero.get_classes_hero() == 'Priest' or 'Shaman' or 'Mage' or 'Warlock':
            self.stats.main_stats = self.stats.int

        self.stats.lvl += 1
        self.stats.stats_up()

    def get_health_hero(self):
        return f'–ó–¥–æ—Ä–æ–≤—å–µ –≥–µ—Ä–æ—è ‚ù§Ô∏è {self.health}'

    def get_stats_hero(self):
        if self.stats.energy >= 1:
            return f'–ó–¥–æ—Ä–æ–≤—å–µ –≥–µ—Ä–æ—è  ‚ù§Ô∏è {self.health}\n' \
                   f'–≠–Ω–µ—Ä–≥–∏—è –≥–µ—Ä–æ—è ‚ö° {self.stats.get_energy()}'
        else:
            return f'–ó–¥–æ—Ä–æ–≤—å–µ –≥–µ—Ä–æ—è  ‚ù§Ô∏è {self.health}\n' \
                   f'–ú–∞–Ω–∞ –≥–µ—Ä–æ—è üíß {self.stats.get_mana()}' \


class NPC:
    def __init__(self):
        self.npc = npc
        self.stats = Stats()

        self.health = self.stats.hp

        if self.health or self.npc.health_procent <= 0:
            self.npc.status = 'Dead'


class Battles:
    def __init__(self):
        self.battle = Battle()

    def hit(self, hero, npc, spell=None):
        # –£–¥–∞—Ä –≥–µ—Ä–æ—è –ø–æ –Ω–ø—Å
        npc.health -= hero.stats.damage
        bot.send_message(user.get_id_account(),
                         str(settings.text_battle(hero.name_hero, npc.name_npc) + hero.stats.damage + 'üí•'))

        # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–ø—Å –≤—ã—à–µ 0, —Ç–æ –Ω–ø—Å –Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –ø–æ –≥–µ—Ä–æ—é
        if npc.health > 0:
            hero.health -= npc.stats.damage
            bot.send_message(user.get_id_account(),
                             str(settings.text_battle(npc.name_hero, hero.name_npc) + npc.stats.damage + 'üí•'))

        # else:
        #     pass


class Movemented:

    def __init__(self):
        self.movement = Movement()

    def move(self, message):
        if game.get_game_status() == None:
            game.set_game_status(status='start game')
        if game.get_location() == None:
            game.set_location(location='Dalaran')
        print(game.get_game_status(), game.get_location())
        print('115')
        location = database.location(location=game.get_location())

        zone = database.Zone(coording_x=self.movement.get_coord_x(),
                             coording_y=self.movement.get_coord_y(),
                             location=location)

        if zone:
            bot.send_message(user.get_id_account(), settings.text_on_game_where_is_location_hero() + f'{zone}')
            bot.register_next_step_handler(message, game.game)
        else:
            bot.delete_message(chat_id=user.get_id_account(), message_id=settings.get_last_message_id())
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_left(), callback_data='Left'),
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_up(), callback_data='Up'),
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_down(), callback_data='Down'),
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_right(), callback_data='Right'),
            )
            messages = bot.send_message(user.get_id_account(), settings.text_movement_none_find(), reply_markup=markup_inline)
            settings.set_last_message_id(message_id=messages.message_id)
            # bot.delete_message(chat_id=user.get_id_account(), message_id=settings.get_last_message_id())
            print(zone)





class SettingsGame:
    """–ö–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    def beginning_settings(self):
        # –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        markup_inline = types.InlineKeyboardMarkup()
        # –ö–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º
        markup_inline.add(
            types.InlineKeyboardButton(text='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫', callback_data='ru'),
            types.InlineKeyboardButton(text='English language üá∫üá∏', callback_data='eng'),
        )
        bot.edit_message_text(chat_id=user.get_id_account(), message_id=settings.get_last_message_id(),
                              text=settings.text_commands(), reply_markup=markup_inline)
        # bot.send_message(user.get_id_account(), settings.text_commands(), reply_markup=markup_inline)

    def set_language(self):
        markup_inline = types.InlineKeyboardMarkup()
        hide_keyboard = types.ReplyKeyboardRemove()
        markup_inline.add(hide_keyboard)
        time.sleep(0.5)
        messages = bot.edit_message_text(chat_id=user.get_id_account(), message_id=settings.get_last_message_id(),
                                         text=settings.text_on_language_set(), reply_markup=None)
        time.sleep(1)
        bot.delete_message(chat_id=user.get_id_account(), message_id=messages.message_id)
        startgame.welcom()


class StartGame:
    """–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã"""
    def __init__(self):
        self.call_func = 0

    def welcom(self):
        """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database.Create_User(id_account=user.get_id_account())

        # –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        markup_inline = types.InlineKeyboardMarkup()

        # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–¥–∞ –∫–Ω–æ–ø–æ–∫.
        markup_inline.add(
            types.InlineKeyboardButton(text=settings.text_menu_button_game_start_game(), callback_data='startgame'),
            types.InlineKeyboardButton(text=settings.text_menu_button_game_register_hero(), callback_data='reghero'),
            types.InlineKeyboardButton(text=settings.text_menu_button_game_settings(), callback_data='settings'),
        )

        if self.call_func <= 0:
            bot.send_message(user.get_id_account(), settings.text_commands(), reply_markup=markup_inline)
            self.call_func += 1
        else:
            bot.edit_message_text(chat_id=user.get_id_account(), message_id=settings.get_last_message_id(),
                                  text=settings.text_commands(), reply_markup=markup_inline)


    def choice_hero_step_one(self, message):
        """–§–∞–∑–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ 1/3"""

        # –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        markup_inline = types.InlineKeyboardMarkup()

        # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–¥–∞ –∫–Ω–æ–ø–æ–∫.
        markup_inline.add(
            types.InlineKeyboardButton(text=settings.text_list_hero_button(), callback_data='list_hero'),
        )
        bot.edit_message_text(chat_id=user.get_id_account(), message_id=settings.get_last_message_id(),
                              text=settings.text_commands(), reply_markup=markup_inline)


    def choice_hero_step_two(self):
        """–§–∞–∑–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ 2/3"""
        # –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        markup_inline = types.InlineKeyboardMarkup()

        text = {}

        # –í–∑—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∞–∫–∫–∞—É–Ω—Ç–∞
        for numm, dicted in database.get_hero_list():

            name_hero = dicted[settings.text_on_db_name_hero()]
            class_hero = dicted[settings.text_on_db_classes_hero()]
            lvl_hero = dicted[settings.text_on_db_lvl_hero()]

            oper = int(numm) + 1
            if not f'{oper} {settings.text_on_func_choice_hero_step_two_hero()}, {name_hero}' in text:
                text[f'{oper} {settings.text_on_func_choice_hero_step_two_hero()}, {name_hero}'] \
                    = f'{name_hero}, {class_hero}, {lvl_hero}'
            else:
                text[f'{oper} {settings.text_on_func_choice_hero_step_two_hero()}, {name_hero}'] \
                    += f'{name_hero}, {class_hero}, {lvl_hero}'

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        for hero in text:
            markup_inline.add(types.InlineKeyboardButton(text=f'{text[hero]}', callback_data=f'{hero}', ),)

        messages = bot.edit_message_text(chat_id=user.get_id_account(), message_id=settings.get_last_message_id(),
                                         text=settings.text_choice_action(), reply_markup=markup_inline)
        settings.set_last_message_id(message_id=messages.message_id)

    def choice_hero_step_three(self, name_hero, message):
        """–ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. 3/3"""
        # –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∑—è—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î
        heroes = database.get_hero(name_hero=name_hero)
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –µ–≥–æ –∏–∑ –ë–î
        hero.hero.set_classes_hero(heroes.get('class'))
        hero.hero.set_name_hero(heroes.get('name hero'))
        hero.hero.set_id_account_hero(heroes.get('id account'))
        hero.stats.set_lvl(heroes.get('lvl'))
        bot.delete_message(chat_id=user.get_id_account(), message_id=settings.get_last_message_id())
        # –°—Ç–∞—Ä—Ç –∏–≥—Ä—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏–≥—Ä—ã
        game.game(message=message)

# class LeftHand(Weapon):
#     """–ö–ª–∞—Å—Å –ª–µ–≤–æ–π —Ä—É–∫–∏"""
#     def __init__(self):
#         super().__init__()
#         pass
#     pass
#
#
# class RightHand(Weapon):
#     """–ö–ª–∞—Å—Å –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏"""
#     def __init__(self):
#         super().__init__()
#         pass
#     pass


class Backpack:
    """–ö–ª–∞—Å—Å –°—É–º–∫–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    def __init__(self):
        self.backpack = []
        pass
    pass


class CreatingHero:
    """–ö–ª–∞—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        creat_hero.set_bot(bot=bot)
        creat_hero.set_settings(settings=settings)
        creat_hero.set_hero(hero=hero)
        creat_hero.set_types(types=types)
        creat_hero.set_user(user=user)
        creat_hero.set_time(time=time)
        creat_hero.set_startgame(startgame=startgame)
        creat_hero.set_database(database=database)

    def creatinghero_step_one_creating_hero(self, message=None):
        """–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        creat_hero.step_one_creating_hero(message=message)

    def creatinghero_two_step_creating_hero(self, message=None):
        """–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        creat_hero.two_step_creating_hero()


class Game:
    """–ö–ª–∞—Å—Å –∏–≥—Ä—ã"""

    def __init__(self):
        self.game_status = None
        self.location = None

    def set_game_status(self, status):
        self.game_status = status

    def get_game_status(self):
        return self.game_status

    def set_location(self, location):
        self.location = location

    def get_location(self):
        return self.location

    # –§—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã.
    def game(self, message):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        markup_inline = types.InlineKeyboardMarkup()
        """–§—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã.
        –£—Å–ª–æ–≤–∏—è: –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥–µ—Ç –±–∏—Ç–≤–∞, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ñ–∞–∑–∞ –±–∏—Ç–≤—ã, –∏–Ω–∞—á–µ —Ñ–∞–∑–∞ —Ö–æ–¥—å–±—ã
        """
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–∏—Ç–≤—ã == True, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ñ–∞–∑–∞ –±–æ—è, –∏–Ω–∞—á–µ —Ñ–∞–∑–∞ —Ö–æ–¥—å–±—ã
        if battle.battle.get_status_battle():
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user.get_id_account(),
                             settings.text_commands(),
                             reply_markup=markup_inline)

        # –ï—Å–ª–∏ —Ñ–∞–∑–∞ –±–∏—Ç–≤—ã == False, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ñ–∞–∑–∞ —Ö–æ–¥—å–±—ã
        else:
            if self.game_status:
                movement.move(message=message)
            elif self.game_status == 'start game':
                pass
            else:
                self.set_game_status(status='start game')
            # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–¥–∞ –∫–Ω–æ–ø–æ–∫.
            markup_inline.add(
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_left(), callback_data='Left'),
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_up(), callback_data='Up'),
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_down(), callback_data='Down'),
                types.InlineKeyboardButton(text=settings.text_on_button_game_non_battle_right(), callback_data='Right'),
            )
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            messages = bot.send_message(user.get_id_account(),
                                        settings.text_commands(),
                                        reply_markup=markup_inline)
            settings.set_last_message_id(message_id=messages.message_id)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# step1
startgame = StartGame()
# step2
settings_game = SettingsGame()
# step3
game = Game()
# step4
movement = Movemented()
# step5
battle = Battles()
# step6
hero = Heroes()
# step7
settings_on_db.set_settings(settings)
# step8
creat_hero = creathero.CreatingHero()
# step9
creatinghero = CreatingHero()
